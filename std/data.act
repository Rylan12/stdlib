/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2020-2021 Rajit Manohar
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */

/*------------------------------------------------------------------------
 *
 *  Standard data types
 *
 *    - d1of<N>  : 1-of-N code
 *    - d1of2    : 1-of-2 code with t/f rails
 *    - dualrail : another name for d1of2
 *
 *------------------------------------------------------------------------
 */

namespace std {

export namespace data {

/*
 *  A delay-insensitive 1-of-N code
 *
 *
 *  Template parameters:
 *
 *         N : the "N" in the 1-of-N code
 *
 *  Signals:
 *
 *      d[N] : the code (data rails) d[0], ..., d[N-1]
 *
 */
export template<pint N>
deftype d1of <: enum<N> (bool?! d[N])
{
   spec {
    exclhi(d)
   }

  /* set/get methods */
  methods {
    set {
     (,i:N: d[i]-);d[self]+
    }
    get {
     [([]i:N: d[i] -> self:=i)]
    }
  }
}


/*
 * Common one-of-two data type has "t" and "f" rails that are used to signal
 * true versus false. No extra wires, just convenient names for the existing
 * data wires.
 */
export deftype d1of2 <: d1of<2> (bool?! t, f)
{
  d[0] = f;
  d[1] = t;
}


/*
 *   dualrail: standard dual rail data
 *
 */
export deftype dualrail <: d1of2() { }


/*
 *  Multi-bit dualrail
 */
export
template<pint M>
deftype Mx1of2 <: int<M> (dualrail d[M])
{
  /* set/get methods */
  methods {
    set {
      (,i:M:[self{i} = 0 -> d[i].t-;d[i].f+ [] else -> d[i].f-;d[i].t+])
    }
    get {
      self:=0;
      (;i:M: self := (self << 1) | d[M-i-1])
    }
  }
}

}
}
