/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2022 Rajit Manohar
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */

/*------------------------------------------------------------------------
 *
 *  Standard components for non-deterministic selection
 *
 *        arbiter : two-input arbiter
 *    raw_arbiter : circuit implementation of standard arbiter
 *
 *------------------------------------------------------------------------
 */
import std::channel;
import std::gates;

namespace std {

  /* two-input arbiter, ala Seitz */
export defcell raw_arbiter(bool? a, b; bool! u, v) 
{
  bool _u, _v;

  /* force exclusive low signals for simulation */
  spec {
    mk_excllo(_u,_v)
  }
  
  prs {
    /* cross coupled nand gates */
    a & _v => _u-
    b & _u => _v-

   /* output filter */
    [keeper=0] _u -> u-
    [keeper=0] _v -> v-
    passp(_u,_v,u)
    passp(_v,_u,v)
  }
}


/*------------------------------------------------------------------------
 *
 *  Arbiter process: 
 *    Used to factor out non-deterministic choice into a dedicated
 *    process. A non-deterministic choice between A, B is converted
 *    into a deterministic choice between Ap and Bp ("primed" channels) 
 *
 *------------------------------------------------------------------------
 */
export template<pint N, M>
defproc arbiter(chan?(int<N>) A; chan?(int<M>) B; chan!(int<N>) Ap;
		chan!(int<M>) Bp)
{
  chp {
    *[[| #A -> Ap!A;A?
     []  #B -> Bp!B;B?
     |]]
  }
}

}
