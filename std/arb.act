/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2022 Rajit Manohar
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */

/*------------------------------------------------------------------------
 *
 *  Standard components for non-deterministic selection
 *
 *        arbiter : two-input arbiter
 *    buf_arbiter : circuit implementation of a standard (buffered) arbiter
 *  ideal_arbiter : circuit implementation of an ideal arbiter
 *
 *  For definitions of a buffered/standard arbiter and their subtle
 *  differences, see doi: 10.1109/TCSI.2020.3011552
 *
 *------------------------------------------------------------------------
 */
import std::channel;
import std::gates;

namespace std {

/* two-input arbiter, ala Seitz */
export defcell buf_arbiter(bool? a, b; bool! u, v) 
{
  bool _u, _v;

  /* force exclusive low signals for simulation */
  spec {
    mk_excllo(_u,_v)
  }
  
  prs {
    /* cross coupled nand gates */
    a & _v => _u-
    b & _u => _v-

   /* output filter */
    [keeper=0] _u<5> -> u-
    [keeper=0] _v<5> -> v-
    passp<10>(_u,_v,u)
    passp<10>(_v,_u,v)
  }
  sizing {
   leak_adjust <- 1;
   _u{-1};
   _v{-1}
  }
}

/* two-input ideal arbiter */
export defcell ideal_arbiter(bool? a, b; bool! u, v) 
{
  bool _u, _v;

  /* force exclusive low signals for simulation */
  spec {
    mk_excllo(_u,_v)
  }
  
  prs {
    /* cross coupled nand gates */
    a & _v => _u-
    b & _u => _v-
  }

   /* output filter */
  prs <_v> {
    [keeper=0] _u | v => u-
  }
  prs <_u> {
    [keeper=0] _v | u => v-
  }
  sizing {
   leak_adjust <- 1;
   _u{-1}; _v{-1};
   u{-1}; v{-1}
  }
}

export 
defproc maybe_execute(channel::e1of1? A; channel::e1of1! S; bool! uA)
{
  ideal_arbiter ia(S.e,A.r,S.r,uA);
  prs {
   uA & S.e => A.e-
  }
  sizing {
    leak_adjust <- 1; 
    A.e {-1}
  }
}

/*------------------------------------------------------------------------


/*------------------------------------------------------------------------
 *
 *  Arbiter process: 
 *    Used to factor out non-deterministic choice into a dedicated
 *    process. A non-deterministic choice between A, B is converted
 *    into a deterministic choice between Ap and Bp ("primed" channels) 
 *
 *------------------------------------------------------------------------
 */
export template<pint N, M>
defproc arbiter(chan?(int<N>) A; chan?(int<M>) B; chan!(int<N>) Ap;
		chan!(int<M>) Bp)
{
  chp {
    *[[| #A -> Ap!A;A?
     []  #B -> Bp!B;B?
     |]]
  }
}

}
